{"version":3,"sources":["../../../../src/components/IconButton/IconButton.tsx"],"names":["IconButton","disabled","type","size","shape","ariaLabel","a11yProps","classes","classNames","styles","icon","cloneElement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmDA;AACA;AACA;AACA;AACA;AACA,QAAMA,UAA+C,GAAG,CAAC;AAAA,IAAA,OAAA;AAEvDC,IAAAA,QAAQ,GAF+C,KAAA;AAGvDC,IAAAA,IAAI,GAHmD,QAAA;AAIvDC,IAAAA,IAAI,GAJmD,QAAA;AAKvDC,IAAAA,KAAK,GALkD,QAAA;AAAA,IAAA,QAAA;AAAA,IAAA,SAAA;AAQvDC,IAAAA;AARuD,GAAD,KASlD;AACJ,UAAMC,SAAS,GAAGD,SAAS,GAAG;AAAE,oBAAcA;AAAhB,KAAH,GAA3B,IAAA;AAEA,UAAME,OAAO,GAAGC,oBACdC,2BADwB,OAAVD,EAEdC,2BAFwB,IAExBA,CAFcD,EAGdC,2BAHwB,KAGxBA,CAHcD,EAId;AAAE,OAACC,2BAAD,QAAA,GAAmBR;AAArB,KAJcO,EAAhB,SAAgBA,CAAhB;AAQA,UAAME,IAAI,GAAG,aAAA,yCAAA,QAAA,IAAA,aACTC,yBAAY,QAAZA,EADS,2BACTA,CADS,GAAb,IAAA;AAIA,WAAA,aACE,gBAAA,aAAA,CAAA,MAAA,EAAA;AAAM,MAAA,SAAS,EAAEJ;AAAjB,KAAA,EAAA,aACE,gBAAA,aAAA,CAAA,QAAA,EAAA,QAAA,CAAA;AACE,MAAA,SAAS,EAAEE,2BADb,MAAA;AAEE,MAAA,IAAI,EAFN,IAAA;AAGE,MAAA,OAAO,EAHT,OAAA;AAIE,MAAA,QAAQ,EAAER;AAJZ,KAAA,EAAA,SAAA,CAAA,EAFJ,IAEI,CADF,CADF;AAxBF,GAAA;;oBAuCA,U","sourcesContent":["import classNames from \"clsx\";\nimport React, {\n  cloneElement,\n  FC,\n  isValidElement,\n  MouseEventHandler,\n  PropsWithChildren,\n} from \"react\";\nimport { a11yIconHiddenProps } from \"../../config\";\nimport styles from \"./IconButton.module.scss\";\n\ntype IconButtonPropsType = {\n  /**\n   * Define button behavior. Default: button\n   */\n  type?: \"button\" | \"submit\" | \"reset\";\n\n  /**\n   * Define button size. Default: normal.\n   */\n  size?: \"normal\" | \"small\" | \"large\";\n\n  /**\n   * Disable button. Default: false.\n   */\n  disabled?: boolean;\n\n  /**\n   * Register click event handler.\n   */\n  onClick?: MouseEventHandler;\n\n  /**\n   * Define the shape of the button (border radius). Default: rounded.\n   */\n  shape?: \"rounded\" | \"circle\";\n\n  /**\n   * Add a class name. Optional.\n   */\n  className?: string;\n\n  /**\n   * Define 'aria-label' attribute for screen readers.\n   * Required for icon buttons because they don't have any other descriptive text.\n   */\n  ariaLabel: string;\n};\n\ntype IconButtonPropsTypeWithChildren = PropsWithChildren<IconButtonPropsType>;\n\n/**\n * A square button with an icon.\n * Please note the children should be a single icon. In any other cases,\n * use Button instead.\n */\nconst IconButton: FC<IconButtonPropsTypeWithChildren> = ({\n  onClick,\n  disabled = false,\n  type = \"button\",\n  size = \"normal\",\n  shape = \"circle\",\n  children,\n  className,\n  ariaLabel,\n}) => {\n  const a11yProps = ariaLabel ? { \"aria-label\": ariaLabel } : null;\n\n  const classes = classNames(\n    styles.wrapper,\n    styles[size],\n    styles[shape],\n    { [styles.disabled]: disabled },\n    className\n  );\n\n  const icon = isValidElement(children)\n    ? cloneElement(children, a11yIconHiddenProps)\n    : null;\n\n  return (\n    <span className={classes}>\n      <button\n        className={styles.button}\n        type={type}\n        onClick={onClick}\n        disabled={disabled}\n        {...a11yProps}\n      >\n        {icon}\n      </button>\n    </span>\n  );\n};\n\nexport default IconButton;\n"],"file":"IconButton.js"}