{"version":3,"sources":["../../../../src/components/IconButton/IconButton.test.tsx"],"names":["testLabel","describe","afterEach","it","container","render","expect","getByText","element","handleClick","jest","fireEvent"],"mappings":"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","sourcesContent":["import { cleanup, fireEvent, render } from '@testing-library/react';\nimport React from 'react';\nimport { ReactComponent as Icon } from '../../img/icons/icon-flag.svg';\nimport IconButton from './IconButton';\n\n// @fixme Review tests and adapt them to IconButton.\n\nconst testLabel = <Icon />;\n\ndescribe('IconButton', () => {\n  afterEach(cleanup);\n\n  it('displays the label', () => {\n    const { container } = render(<IconButton>{testLabel}</IconButton>);\n    // const element = getByText(testLabel);\n    expect(container.firstChild).toMatch('testLabel');\n    // expect(element).toBeInTheDocument();\n  });\n\n  it('can be of the type submit', () => {\n    const { getByText } = render(<IconButton type='submit'>{testLabel}</IconButton>);\n    const element = getByText(testLabel);\n    expect(element.closest('IconButton')).toHaveAttribute('type', 'submit');\n  });\n\n  it('can be of the type reset', () => {\n    const { getByText } = render(<IconButton type='reset'>{testLabel}</IconButton>);\n    const element = getByText(testLabel);\n    expect(element.closest('IconButton')).toHaveAttribute('type', 'reset');\n  });\n\n  it('can be of the type IconButton', () => {\n    const { getByText } = render(<IconButton type='IconButton'>{testLabel}</IconButton>);\n    const element = getByText(testLabel);\n    expect(element.closest('IconButton')).toHaveAttribute('type', 'IconButton');\n  });\n\n  it('is of the type IconButton by default', () => {\n    const { getByText } = render(<IconButton>{testLabel}</IconButton>);\n    const element = getByText(testLabel);\n    expect(element.closest('IconButton')).toHaveAttribute('type', 'IconButton');\n  });\n\n  it('handles clicks', () => {\n    const handleClick = jest.fn();\n    const { getByText } = render(<IconButton onClick={handleClick}>{testLabel}</IconButton>);\n    const element = getByText(testLabel);\n    fireEvent.click(element);\n    expect(handleClick).toHaveBeenCalled();\n  });\n\n  it('ignores clicks when disabled', () => {\n    const handleClick = jest.fn();\n    const { getByText } = render(<IconButton onClick={handleClick} disabled>{testLabel}</IconButton>);\n    const element = getByText(testLabel);\n    fireEvent.click(element);\n    expect(handleClick).not.toHaveBeenCalled();\n  });\n\n  it('supports small size', () => {\n    const { getByText } = render(<IconButton size='small'>{testLabel}</IconButton>);\n    const element = getByText(testLabel);\n    expect(element.closest('IconButton')).toHaveClass('small');\n  });\n});\n"],"file":"IconButton.test.js"}