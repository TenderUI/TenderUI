{"version":3,"sources":["../../../../src/components/Button/Button.tsx"],"names":["classNames","React","styles","Button","onClick","disabled","type","size","shape","children","className","ariaLabel","a11yProps","classes","wrapper","button"],"mappings":";;AAAA,OAAOA,UAAP,MAAuB,MAAvB;AACA,OAAOC,KAAP,MAAgE,OAAhE;AACA,OAAOC,MAAP,MAAmB,sBAAnB;;AAyCA;AACA;AACA;AACA,MAAMC,MAAuC,GAAG,CAAC;AAC/CC,EAAAA,OAD+C;AAE/CC,EAAAA,QAAQ,GAAG,KAFoC;AAG/CC,EAAAA,IAAI,GAAG,QAHwC;AAI/CC,EAAAA,IAAI,GAAG,QAJwC;AAK/CC,EAAAA,KAAK,GAAG,QALuC;AAM/CC,EAAAA,QAN+C;AAO/CC,EAAAA,SAP+C;AAQ/CC,EAAAA;AAR+C,CAAD,KAS1C;AACJ,QAAMC,SAAS,GAAGD,SAAS,GAAG;AAAE,kBAAcA;AAAhB,GAAH,GAAiC,IAA5D;AAEA,QAAME,OAAO,GAAGb,UAAU,CACxBE,MAAM,CAACY,OADiB,EAExBZ,MAAM,CAACK,IAAD,CAFkB,EAGxBL,MAAM,CAACM,KAAD,CAHkB,EAIxB;AAAE,KAACN,MAAM,CAACG,QAAR,GAAmBA;AAArB,GAJwB,EAKxBK,SALwB,CAA1B;AAQA,sBACE;AAAM,IAAA,SAAS,EAAEG;AAAjB,kBACE;AACE,IAAA,SAAS,EAAEX,MAAM,CAACa,MADpB;AAEE,IAAA,IAAI,EAAET,IAFR;AAGE,IAAA,OAAO,EAAEF,OAHX;AAIE,IAAA,QAAQ,EAAEC;AAJZ,KAKMO,SALN,GAOGH,QAPH,CADF,CADF;AAaD,CAjCD;;AAmCA,eAAeN,MAAf","sourcesContent":["import classNames from \"clsx\";\nimport React, { FC, MouseEventHandler, PropsWithChildren } from \"react\";\nimport styles from \"./Button.module.scss\";\n\ntype ButtonPropsType = {\n  /**\n   * Define button behavior. Default: button\n   */\n  type?: \"button\" | \"submit\" | \"reset\";\n\n  /**\n   * Define button size. Default: normal\n   */\n  size?: \"normal\" | \"small\" | \"large\";\n\n  /**\n   * Define the shape of the button (border radius). Default: rounded.\n   */\n  shape?: \"rounded\" | \"circle\";\n\n  /**\n   * Disable button. Default: false\n   */\n  disabled?: boolean;\n\n  /**\n   * Register click event handler.\n   */\n  onClick?: MouseEventHandler;\n\n  /**\n   * Add a class name. Optional.\n   */\n  className?: string;\n\n  /**\n   * Define 'aria-label' attribute for screen readers. Optional.\n   */\n  ariaLabel?: string;\n};\n\ntype ButtonPropsTypeWithChildren = PropsWithChildren<ButtonPropsType>;\n\n/**\n * A simple button.\n */\nconst Button: FC<ButtonPropsTypeWithChildren> = ({\n  onClick,\n  disabled = false,\n  type = \"button\",\n  size = \"normal\",\n  shape = \"circle\",\n  children,\n  className,\n  ariaLabel,\n}) => {\n  const a11yProps = ariaLabel ? { \"aria-label\": ariaLabel } : null;\n\n  const classes = classNames(\n    styles.wrapper,\n    styles[size],\n    styles[shape],\n    { [styles.disabled]: disabled },\n    className\n  );\n\n  return (\n    <span className={classes}>\n      <button\n        className={styles.button}\n        type={type}\n        onClick={onClick}\n        disabled={disabled}\n        {...a11yProps}\n      >\n        {children}\n      </button>\n    </span>\n  );\n};\n\nexport default Button;\n"],"file":"Button.js"}