{"version":3,"sources":["../../../../src/components/IconButton/IconButton.tsx"],"names":["classNames","React","cloneElement","isValidElement","a11yIconHiddenProps","Button","styles","IconButton","onClick","disabled","type","size","shape","ariaLabel","children","classes","icon"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,YAAvB;AACA,OAAOC,KAAP,IAAgBC,YAAhB,EAAkCC,cAAlC,QAA8F,OAA9F;AACA,SAASC,mBAAT,QAAoC,mBAApC;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;;AAqCA;;;;;AAKA,MAAMC,UAA+C,GAAG,CAAC;AACvDC,EAAAA,OADuD;AAEvDC,EAAAA,QAAQ,GAAG,KAF4C;AAGvDC,EAAAA,IAAI,GAAG,QAHgD;AAIvDC,EAAAA,IAAI,GAAG,QAJgD;AAKvDC,EAAAA,KAAK,GAAG,QAL+C;AAMvDC,EAAAA,SANuD;AAOvDC,EAAAA;AAPuD,CAAD,KAQlD;AACJ,QAAMC,OAAO,GAAGf,UAAU,CACxBM,MAAM,CAACU,IADiB,EAExBV,MAAM,CAACK,IAAD,CAFkB,CAA1B;AAKA,QAAMK,IAAI,GAAG,aAAAb,cAAc,CAACW,QAAD,CAAd,gBACXZ,YAAY,CAACY,QAAD,EAAWV,mBAAX,CADD,GAEX,IAFF;AAIA,sBACE,oBAAC,MAAD;AACE,IAAA,IAAI,EAAEO,IADR;AAEE,IAAA,KAAK,EAAEC,KAFT;AAGE,IAAA,IAAI,EAAEF,IAHR;AAIE,IAAA,SAAS,EAAEK,OAJb;AAKE,IAAA,OAAO,EAAEP,OALX;AAME,IAAA,QAAQ,EAAEC,QANZ;AAOE,IAAA,SAAS,EAAEI;AAPb,KASGG,IATH,CADF;AAaD,CA/BD;;AAiCA,eAAeT,UAAf","sourcesContent":["import classNames from 'classnames';\nimport React, { cloneElement, FC, isValidElement, MouseEventHandler, PropsWithChildren } from 'react';\nimport { a11yIconHiddenProps } from '../../lib/helpers';\nimport Button from '../Button/Button';\nimport styles from './IconButton.module.scss';\n\ntype IconButtonPropsType = {\n  /**\n   * Define button behavior. Default: button\n   */\n  type?: 'button' | 'submit' | 'reset';\n\n  /**\n   * Define button size. Default: normal.\n   */\n  size?: 'normal' | 'small' | 'large';\n\n  /**\n   * Disable button. Default: false.\n   */\n  disabled?: boolean;\n\n  /**\n   * Register click event handler.\n   */\n  onClick?: MouseEventHandler;\n\n  /**\n   * Define the shape of the button (border radius). Default: rounded.\n   */\n  shape?: 'rounded' | 'circle';\n\n  /**\n   * Define 'aria-label' attribute for screen readers. \n   * Required for icon buttons because they don't have any other descriptive text.\n   */\n  ariaLabel: string;\n}\n\ntype IconButtonPropsTypeWithChildren = PropsWithChildren<IconButtonPropsType>\n\n/**\n * A square button with an icon.\n * Please note the children should be a single icon. In any other cases, \n * use Button instead.\n */\nconst IconButton: FC<IconButtonPropsTypeWithChildren> = ({\n  onClick,\n  disabled = false,\n  type = 'button',\n  size = 'normal',\n  shape = 'circle',\n  ariaLabel,\n  children\n}) => {\n  const classes = classNames(\n    styles.icon,\n    styles[size],\n  );\n\n  const icon = isValidElement(children) ? \n    cloneElement(children, a11yIconHiddenProps) : \n    null\n\n  return (\n    <Button \n      size={size} \n      shape={shape}\n      type={type}\n      className={classes}\n      onClick={onClick}\n      disabled={disabled}\n      ariaLabel={ariaLabel}\n    >\n      {icon}\n    </Button>\n  );\n};\n\nexport default IconButton;\n"],"file":"IconButton.js"}