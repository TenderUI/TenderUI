{"version":3,"sources":["../../../../src/components/IconButton/IconButton.tsx"],"names":["classNames","React","cloneElement","isValidElement","a11yIconHiddenProps","styles","IconButton","onClick","disabled","type","size","shape","children","className","ariaLabel","a11yProps","classes","wrapper","icon","button"],"mappings":";;AAAA,OAAOA,UAAP,MAAuB,MAAvB;AACA,OAAOC,KAAP,IACEC,YADF,EAGEC,cAHF,QAMO,OANP;AAOA,SAASC,mBAAT,QAAoC,cAApC;AACA,OAAOC,MAAP,MAAmB,0BAAnB;;AA0CA;;;;;AAKA,MAAMC,UAA+C,GAAG,CAAC;AACvDC,EAAAA,OADuD;AAEvDC,EAAAA,QAAQ,GAAG,KAF4C;AAGvDC,EAAAA,IAAI,GAAG,QAHgD;AAIvDC,EAAAA,IAAI,GAAG,QAJgD;AAKvDC,EAAAA,KAAK,GAAG,QAL+C;AAMvDC,EAAAA,QANuD;AAOvDC,EAAAA,SAPuD;AAQvDC,EAAAA;AARuD,CAAD,KASlD;AACJ,QAAMC,SAAS,GAAGD,SAAS,GAAG;AAAE,kBAAcA;AAAhB,GAAH,GAAiC,IAA5D;AAEA,QAAME,OAAO,GAAGhB,UAAU,CACxBK,MAAM,CAACY,OADiB,EAExBZ,MAAM,CAACK,IAAD,CAFkB,EAGxBL,MAAM,CAACM,KAAD,CAHkB,EAIxB;AAAE,KAACN,MAAM,CAACG,QAAR,GAAmBA;AAArB,GAJwB,EAKxBK,SALwB,CAA1B;AAQA,QAAMK,IAAI,GAAG,aAAAf,cAAc,CAACS,QAAD,CAAd,gBACTV,YAAY,CAACU,QAAD,EAAWR,mBAAX,CADH,GAET,IAFJ;AAIA,sBACE;AAAM,IAAA,SAAS,EAAEY;AAAjB,kBACE;AACE,IAAA,SAAS,EAAEX,MAAM,CAACc,MADpB;AAEE,IAAA,IAAI,EAAEV,IAFR;AAGE,IAAA,OAAO,EAAEF,OAHX;AAIE,IAAA,QAAQ,EAAEC;AAJZ,KAKMO,SALN,GAOGG,IAPH,CADF,CADF;AAaD,CArCD;;AAuCA,eAAeZ,UAAf","sourcesContent":["import classNames from \"clsx\";\nimport React, {\n  cloneElement,\n  FC,\n  isValidElement,\n  MouseEventHandler,\n  PropsWithChildren,\n} from \"react\";\nimport { a11yIconHiddenProps } from \"../../config\";\nimport styles from \"./IconButton.module.scss\";\n\ntype IconButtonPropsType = {\n  /**\n   * Define button behavior. Default: button\n   */\n  type?: \"button\" | \"submit\" | \"reset\";\n\n  /**\n   * Define button size. Default: normal.\n   */\n  size?: \"normal\" | \"small\" | \"large\";\n\n  /**\n   * Disable button. Default: false.\n   */\n  disabled?: boolean;\n\n  /**\n   * Register click event handler.\n   */\n  onClick?: MouseEventHandler;\n\n  /**\n   * Define the shape of the button (border radius). Default: rounded.\n   */\n  shape?: \"rounded\" | \"circle\";\n\n  /**\n   * Add a class name. Optional.\n   */\n  className?: string;\n\n  /**\n   * Define 'aria-label' attribute for screen readers.\n   * Required for icon buttons because they don't have any other descriptive text.\n   */\n  ariaLabel: string;\n};\n\ntype IconButtonPropsTypeWithChildren = PropsWithChildren<IconButtonPropsType>;\n\n/**\n * A square button with an icon.\n * Please note the children should be a single icon. In any other cases,\n * use Button instead.\n */\nconst IconButton: FC<IconButtonPropsTypeWithChildren> = ({\n  onClick,\n  disabled = false,\n  type = \"button\",\n  size = \"normal\",\n  shape = \"circle\",\n  children,\n  className,\n  ariaLabel,\n}) => {\n  const a11yProps = ariaLabel ? { \"aria-label\": ariaLabel } : null;\n\n  const classes = classNames(\n    styles.wrapper,\n    styles[size],\n    styles[shape],\n    { [styles.disabled]: disabled },\n    className\n  );\n\n  const icon = isValidElement(children)\n    ? cloneElement(children, a11yIconHiddenProps)\n    : null;\n\n  return (\n    <span className={classes}>\n      <button\n        className={styles.button}\n        type={type}\n        onClick={onClick}\n        disabled={disabled}\n        {...a11yProps}\n      >\n        {icon}\n      </button>\n    </span>\n  );\n};\n\nexport default IconButton;\n"],"file":"IconButton.js"}