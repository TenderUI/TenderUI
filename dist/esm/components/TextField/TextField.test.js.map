{"version":3,"sources":["../../../../src/components/TextField/TextField.test.tsx"],"names":["cleanup","render","React","TextField","describe","afterEach","it","container","expect","firstChild","toContainHTML","placeholder","getByPlaceholderText","inputNode","toBeInTheDocument","tabindex","toHaveAttribute"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,MAAlB,QAAgC,wBAAhC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AAEAC,QAAQ,CAAC,WAAD,EAAc,MAAM;AAC1BC,EAAAA,SAAS,CAACL,OAAD,CAAT;AAEAM,EAAAA,EAAE,CAAC,oBAAD,EAAuB,MAAM;AAC7B,UAAM;AAAEC,MAAAA;AAAF,QAAgBN,MAAM,eAAC,oBAAC,SAAD,OAAD,CAA5B;AACAO,IAAAA,MAAM,CAACD,SAAS,CAACE,UAAX,CAAN,CAA6BC,aAA7B,CAA2C,QAA3C;AACD,GAHC,CAAF;AAKAJ,EAAAA,EAAE,CAAC,uBAAD,EAA0B,MAAM;AAChC,UAAMK,WAAW,GAAG,eAApB;AAEA,UAAM;AAAEC,MAAAA;AAAF,QAA2BX,MAAM,eAAC,oBAAC,SAAD;AAAW,MAAA,WAAW,EAAEU;AAAxB,MAAD,CAAvC;AAEA,UAAME,SAAS,GAAGD,oBAAoB,CAACD,WAAD,CAAtC;AAEAH,IAAAA,MAAM,CAACK,SAAD,CAAN,CAAkBC,iBAAlB;AACD,GARC,CAAF;AAUAR,EAAAA,EAAE,CAAC,wBAAD,EAA2B,MAAM;AACjC,UAAMS,QAAQ,GAAG,CAAjB;AAEA,UAAM;AAAER,MAAAA;AAAF,QAAgBN,MAAM,eAAC,oBAAC,SAAD;AAAW,MAAA,QAAQ,EAAEc;AAArB,MAAD,CAA5B;AACAP,IAAAA,MAAM,CAACD,SAAS,CAACE,UAAV,CAAqBA,UAAtB,CAAN,CAAwCO,eAAxC,CAAwD,UAAxD,EAAqE,GAAED,QAAS,EAAhF;AACD,GALC,CAAF;AAOAT,EAAAA,EAAE,CAAC,uBAAD,EAA0B,MAAM;AAChC,UAAMK,WAAW,GAAG,eAApB;AAEA,UAAM;AAAEC,MAAAA;AAAF,QAA2BX,MAAM,eAAC,oBAAC,SAAD;AAAW,MAAA,WAAW,EAAEU;AAAxB,MAAD,CAAvC;AAEA,UAAME,SAAS,GAAGD,oBAAoB,CAACD,WAAD,CAAtC;AAEAH,IAAAA,MAAM,CAACK,SAAD,CAAN,CAAkBC,iBAAlB;AACD,GARC,CAAF;AASD,CAlCO,CAAR","sourcesContent":["import { cleanup, render } from '@testing-library/react';\nimport React from 'react';\nimport TextField from './TextField';\n\ndescribe('TextField', () => {\n  afterEach(cleanup);\n\n  it('displays the input', () => {\n    const { container } = render(<TextField />);\n    expect(container.firstChild).toContainHTML('<input');\n  });\n\n  it('renders a placeholder', () => {\n    const placeholder = 'A placeholder';\n\n    const { getByPlaceholderText } = render(<TextField placeholder={placeholder} />);\n\n    const inputNode = getByPlaceholderText(placeholder);\n\n    expect(inputNode).toBeInTheDocument();\n  });\n\n  it('has tabindex attribute', () => {\n    const tabindex = 2;\n\n    const { container } = render(<TextField tabIndex={tabindex} />);\n    expect(container.firstChild.firstChild).toHaveAttribute('tabindex', `${tabindex}`);\n  });\n\n  it('renders a placeholder', () => {\n    const placeholder = 'A placeholder';\n\n    const { getByPlaceholderText } = render(<TextField placeholder={placeholder} />);\n\n    const inputNode = getByPlaceholderText(placeholder);\n\n    expect(inputNode).toBeInTheDocument();\n  });\n});\n"],"file":"TextField.test.js"}