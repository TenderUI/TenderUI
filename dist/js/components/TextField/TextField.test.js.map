{"version":3,"sources":["../../../../src/components/TextField/TextField.test.tsx"],"names":["describe","afterEach","cleanup","it","container","expect","firstChild","toContainHTML","placeholder","getByPlaceholderText","inputNode","toBeInTheDocument","tabindex","toHaveAttribute"],"mappings":";;AAAA;;AACA;;AACA;;;;AAEAA,QAAQ,CAAC,OAAD,EAAU,YAAM;AACtBC,EAAAA,SAAS,CAACC,cAAD,CAAT;AAEAC,EAAAA,EAAE,CAAC,oBAAD,EAAuB,YAAM;AAAA,kBACP,iCAAO,8BAAC,kBAAD,OAAP,CADO;AAAA,QACrBC,SADqB,WACrBA,SADqB;;AAE7BC,IAAAA,MAAM,CAACD,SAAS,CAACE,UAAX,CAAN,CAA6BC,aAA7B,CAA2C,QAA3C;AACD,GAHC,CAAF;AAKAJ,EAAAA,EAAE,CAAC,uBAAD,EAA0B,YAAM;AAChC,QAAMK,WAAW,GAAG,eAApB;;AADgC,mBAGC,iCAAO,8BAAC,kBAAD;AAAW,MAAA,WAAW,EAAEA;AAAxB,MAAP,CAHD;AAAA,QAGxBC,oBAHwB,YAGxBA,oBAHwB;;AAKhC,QAAMC,SAAS,GAAGD,oBAAoB,CAACD,WAAD,CAAtC;AAEAH,IAAAA,MAAM,CAACK,SAAD,CAAN,CAAkBC,iBAAlB;AACD,GARC,CAAF;AAUAR,EAAAA,EAAE,CAAC,wBAAD,EAA2B,YAAM;AACjC,QAAMS,QAAQ,GAAG,CAAjB;;AADiC,mBAGX,iCAAO,8BAAC,kBAAD;AAAW,MAAA,QAAQ,EAAEA;AAArB,MAAP,CAHW;AAAA,QAGzBR,SAHyB,YAGzBA,SAHyB;;AAKjCC,IAAAA,MAAM,CAACD,SAAS,CAACE,UAAX,CAAN,CAA6BO,eAA7B,CAA6C,UAA7C,YAA4DD,QAA5D;AACD,GANC,CAAF;AAQAT,EAAAA,EAAE,CAAC,uBAAD,EAA0B,YAAM;AAChC,QAAMK,WAAW,GAAG,eAApB;;AADgC,mBAGC,iCAAO,8BAAC,kBAAD;AAAW,MAAA,WAAW,EAAEA;AAAxB,MAAP,CAHD;AAAA,QAGxBC,oBAHwB,YAGxBA,oBAHwB;;AAKhC,QAAMC,SAAS,GAAGD,oBAAoB,CAACD,WAAD,CAAtC;AAEAH,IAAAA,MAAM,CAACK,SAAD,CAAN,CAAkBC,iBAAlB;AACD,GARC,CAAF;AASD,CAnCO,CAAR","sourcesContent":["import { cleanup, fireEvent, render } from '@testing-library/react';\nimport React from 'react';\nimport TextField from './TextField';\n\ndescribe('Input', () => {\n  afterEach(cleanup);\n\n  it('displays the input', () => {\n    const { container } = render(<TextField />);\n    expect(container.firstChild).toContainHTML('<input');\n  });\n\n  it('renders a placeholder', () => {\n    const placeholder = 'A placeholder';\n\n    const { getByPlaceholderText } = render(<TextField placeholder={placeholder} />);\n\n    const inputNode = getByPlaceholderText(placeholder);\n\n    expect(inputNode).toBeInTheDocument();\n  });\n\n  it('has tabindex attribute', () => {\n    const tabindex = 2;\n\n    const { container } = render(<TextField tabIndex={tabindex} />);\n\n    expect(container.firstChild).toHaveAttribute('tabindex', `${tabindex}`);\n  });\n\n  it('renders a placeholder', () => {\n    const placeholder = 'A placeholder';\n\n    const { getByPlaceholderText } = render(<TextField placeholder={placeholder} />);\n\n    const inputNode = getByPlaceholderText(placeholder);\n\n    expect(inputNode).toBeInTheDocument();\n  });\n});\n"],"file":"TextField.test.js"}