{"version":3,"sources":["../../../../src/components/IconButton/IconButton.tsx"],"names":["IconButton","onClick","disabled","type","size","shape","children","className","ariaLabel","a11yProps","classes","styles","wrapper","icon","a11yIconHiddenProps","button"],"mappings":";;;;;;;;;AAAA;;AACA;;AAOA;;AACA;;;;;;;;;;;;AA0CA;AACA;AACA;AACA;AACA;AACA,IAAMA,UAA+C,GAAG,SAAlDA,UAAkD,OASlD;AAAA,MARJC,OAQI,QARJA,OAQI;AAAA,2BAPJC,QAOI;AAAA,MAPJA,QAOI,8BAPO,KAOP;AAAA,uBANJC,IAMI;AAAA,MANJA,IAMI,0BANG,QAMH;AAAA,uBALJC,IAKI;AAAA,MALJA,IAKI,0BALG,QAKH;AAAA,wBAJJC,KAII;AAAA,MAJJA,KAII,2BAJI,QAIJ;AAAA,MAHJC,QAGI,QAHJA,QAGI;AAAA,MAFJC,SAEI,QAFJA,SAEI;AAAA,MADJC,SACI,QADJA,SACI;AACJ,MAAMC,SAAS,GAAGD,SAAS,GAAG;AAAE,kBAAcA;AAAhB,GAAH,GAAiC,IAA5D;AAEA,MAAME,OAAO,GAAG,mBACdC,0BAAOC,OADO,EAEdD,0BAAOP,IAAP,CAFc,EAGdO,0BAAON,KAAP,CAHc,sBAIXM,0BAAOT,QAJI,EAIOA,QAJP,GAKdK,SALc,CAAhB;AAQA,MAAMM,IAAI,GAAG,wCAAeP,QAAf,iBACT,yBAAaA,QAAb,EAAuBQ,2BAAvB,CADS,GAET,IAFJ;AAIA,sBACE;AAAM,IAAA,SAAS,EAAEJ;AAAjB,kBACE;AACE,IAAA,SAAS,EAAEC,0BAAOI,MADpB;AAEE,IAAA,IAAI,EAAEZ,IAFR;AAGE,IAAA,OAAO,EAAEF,OAHX;AAIE,IAAA,QAAQ,EAAEC;AAJZ,KAKMO,SALN,GAOGI,IAPH,CADF,CADF;AAaD,CArCD;;eAuCeb,U","sourcesContent":["import classNames from \"clsx\";\nimport React, {\n  cloneElement,\n  FC,\n  isValidElement,\n  MouseEventHandler,\n  PropsWithChildren,\n} from \"react\";\nimport { a11yIconHiddenProps } from \"../../config\";\nimport styles from \"./IconButton.module.scss\";\n\ntype IconButtonPropsType = {\n  /**\n   * Define button behavior. Default: button\n   */\n  type?: \"button\" | \"submit\" | \"reset\";\n\n  /**\n   * Define button size. Default: normal.\n   */\n  size?: \"normal\" | \"small\" | \"large\";\n\n  /**\n   * Disable button. Default: false.\n   */\n  disabled?: boolean;\n\n  /**\n   * Register click event handler.\n   */\n  onClick?: MouseEventHandler;\n\n  /**\n   * Define the shape of the button (border radius). Default: rounded.\n   */\n  shape?: \"rounded\" | \"circle\";\n\n  /**\n   * Add a class name. Optional.\n   */\n  className?: string;\n\n  /**\n   * Define 'aria-label' attribute for screen readers.\n   * Required for icon buttons because they don't have any other descriptive text.\n   */\n  ariaLabel: string;\n};\n\ntype IconButtonPropsTypeWithChildren = PropsWithChildren<IconButtonPropsType>;\n\n/**\n * A square button with an icon.\n * Please note the children should be a single icon. In any other cases,\n * use Button instead.\n */\nconst IconButton: FC<IconButtonPropsTypeWithChildren> = ({\n  onClick,\n  disabled = false,\n  type = \"button\",\n  size = \"normal\",\n  shape = \"circle\",\n  children,\n  className,\n  ariaLabel,\n}) => {\n  const a11yProps = ariaLabel ? { \"aria-label\": ariaLabel } : null;\n\n  const classes = classNames(\n    styles.wrapper,\n    styles[size],\n    styles[shape],\n    { [styles.disabled]: disabled },\n    className\n  );\n\n  const icon = isValidElement(children)\n    ? cloneElement(children, a11yIconHiddenProps)\n    : null;\n\n  return (\n    <span className={classes}>\n      <button\n        className={styles.button}\n        type={type}\n        onClick={onClick}\n        disabled={disabled}\n        {...a11yProps}\n      >\n        {icon}\n      </button>\n    </span>\n  );\n};\n\nexport default IconButton;\n"],"file":"IconButton.js"}